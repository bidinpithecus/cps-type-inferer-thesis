@book{aho2008compilers,
  title       = {Compiladores: Princípios, técnicas e ferramentas},
  author      = {Aho, Alfred V and Sethi, Ravi and Ullman, Jeffrey D and Lam, Monica S},
  year        = {2008},
  edition     = {2th},
  translation = {Vieira, Daniel},
  publisher   = {Pearson Education},
  address     = {São Paulo, SP, Brasil}
}

@article{appel1997shrinking,
  title     = {Shrinking lambda expressions in linear time},
  author    = {Appel, Andrew W and Jim, Trevor},
  journal   = {J. Funct. Prog.},
  publisher = {Cambridge University Press (CUP)},
  volume    = 7,
  number    = 5,
  pages     = {515--540},
  month     = sep,
  year      = 1997
}

@book{appel1992compiling,
  author    = {Appel, Andrew W.},
  title     = {Compiling with continuations},
  year      = {1992},
  isbn      = {0521416957},
  publisher = {Cambridge University Press},
  address   = {USA}
}

@article{bowman2018cps,
  author    = {William J. Bowman and Youyou Cong and Nick Rioux and Amal Ahmed},
  title     = {Type-Preserving CPS Translation of $\Sigma$ and $\Pi$ Types is Not Not Possible},
  journal   = {Proceedings of the ACM on Programming Languages},
  volume    = {2},
  number    = {POPL},
  year      = {2018},
  article   = {22},
  pages     = {1--33},
  publisher = {ACM},
  doi       = {10.1145/3158110},
  url       = {https://doi.org/10.1145/3158110}
}

@mastersthesis{castro2019certificacao,
  author = {Rafael Castro Gonçalves Silva},
  school = {UDESC},
  title  = {Uma Certificação em Coq do Algoritmo W Monádico},
  year   = {2019}
}

@article{church1932set,
  title     = {A set of postulates for the foundation of logic},
  author    = {Church, Alonzo},
  journal   = {Annals of mathematics},
  pages     = {346--366},
  year      = {1932},
  publisher = {JSTOR}
}

@article{church1940formulation,
  title     = {A formulation of the simple theory of types},
  author    = {Church, Alonzo},
  journal   = {J. Symb. Log.},
  volume    = {5},
  number    = {2},
  pages     = {56--68},
  year      = {1940},
  publisher = {Cambridge University Press (CUP)}
}

@incollection{coquand2022type,
  author    = {Coquand, Thierry},
  title     = {{Type Theory}},
  booktitle = {The {Stanford} Encyclopedia of Philosophy},
  editor    = {Edward N. Zalta and Uri Nodelman},
  year      = {2022},
  publisher = {Metaphysics Research Lab, Stanford University}
}

@article{coquand1988calculus,
  title   = {The calculus of constructions},
  author  = {Thierry Coquand and Gérard Huet},
  journal = {Information and Computation},
  volume  = {76},
  number  = {2},
  pages   = {95-120},
  year    = {1988}
}

@phdthesis{vasconcellos2004inferencia,
  author = {Cristiano Damiani Vasconcellos},
  title  = {Inferência de Tipos com Suporte para Sobrecarga Baseada no Sistema CT},
  school = {Universidade Federal de Minas Gerais},
  year   = {2004}
}

@book{cooper2014construindo,
  author    = {Cooper, Keith D and Torczon, Linda},
  title     = {Contruindo Compiladores},
  publisher = {Elsevier},
  edition   = {2th},
  year      = {2014}
}

@phdthesis{damas1982principal,
  title  = {Principal type-schemes for functional programs},
  author = {Damas, Luis and Milner, Robin},
  year   = {1982},
  school = {University of Edinburgh, Scotland}
}

@phdthesis{damas1984assignment,
  title  = {Type assignment in programming languages},
  author = {Damas, Luis},
  year   = {1984},
  school = {University of Edinburgh}
}

@article{flanagan1993essence,
  author     = {Flanagan, Cormac and Sabry, Amr and Duba, Bruce F. and Felleisen, Matthias},
  title      = {The Essence of Compiling with Continuations},
  year       = {1993},
  issue_date = {June 1993},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {28},
  number     = {6},
  issn       = {0362-1340},
  url        = {https://doi.org/10.1145/173262.155113},
  doi        = {10.1145/173262.155113},
  journal    = {SIGPLAN Not.},
  month      = {jun},
  pages      = {237--247},
  numpages   = {11}
}

@inproceedings{kennedy2007continuations,
  author    = {Kennedy, Andrew},
  title     = {Compiling with continuations, continued},
  year      = {2007},
  publisher = {Association for Computing Machinery}
}

@inproceedings{milner1978polymorphism,
  title     = {A theory of type polymorphism in programming},
  author    = {Milner, Robin},
  booktitle = {Journal of Computer and System Sciences},
  volume    = {17},
  number    = {3},
  pages     = {348--375},
  year      = {1978},
  publisher = {Elsevier}
}

@article{morrisett1999systemF,
  author = {Morrisett, Greg and Walker, David and Crary, Karl and Glew, Neal},
  title = {From system F to typed assembly language},
  year = {1999},
  issue_date = {May 1999},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {21},
  number = {3},
  issn = {0164-0925},
  url = {https://doi.org/10.1145/319301.319345},
  doi = {10.1145/319301.319345},
  abstract = {We motivate the design of typed assembly language (TAL) and present a type-preserving ttranslation from Systemn F to TAL. The typed assembly language we pressent is based on a conventional RISC assembly language, but its static type sytem provides support for enforcing high-level language abstratctions, such as closures, tuples, and user-defined abstract data types. The type system ensures that well-typed programs cannot violatet these abstractionsl In addition, the typing constructs admit many low-level compiler optimiztaions. Our translation to TAL is specified as a sequence of type-preserving transformations, including CPS and closure conversion phases; type-correct source programs are mapped to type-correct assembly language. A key contribution is an approach to polymorphic   closure conversion that is considerably simpler than previous work. The compiler and typed assembly lanugage provide a fully automatic way to produce certified code, suitable for use in systems where unstrusted and potentially malicious code must be checked for safety before execution.},
  journal = {ACM Trans. Program. Lang. Syst.},
  month = may,
  pages = {527-568},
  numpages = {42},
  keywords = {typed intermediate languages, typed assembly language, type-directed compilation, secure extensible systems, closure conversion, certified code}
}

@book{muchnick1997advanced,
  title     = {Advanced Compiler Design and Implementation},
  author    = {Muchnick, Steven S},
  publisher = {Morgan Kaufmann},
  month     = sep,
  year      = {1997},
  address   = {Oxford, England}
}

@inproceedings{necula1997pcc,
  author = {Necula, George C.},
  title = {Proof-carrying code},
  year = {1997},
  isbn = {0897918533},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/263699.263712},
  doi = {10.1145/263699.263712},
  abstract = {This paper describes proof-carrying code (PCC), a mechanism by which a host system can determine with certainty that it is safe to execute a program supplied (possibly in binary form) by an untrusted source. For this to be possible, the untrusted code producer must supply with the code a safety proof that attests to the code's adherence to a previously defined safety policy. The host can then easily and quickly validate the proof without using cryptography and without consulting any external agents.In order to gain preliminary experience with PCC, we have performed several case studies. We show in this paper how proof-carrying code might be used to develop safe assembly-language extensions of ML programs. In the context of this case study, we present and prove the adequacy of concrete representations for the safety policy, the safety proofs, and the proof validation. Finally, we briefly discuss how we use proof-carrying code to develop network packet filters that are faster than similar filters developed using other techniques and are formally guaranteed to be safe with respect to a given operating system safety policy.},
  booktitle = {Proceedings of the 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  pages = {106–119},
  numpages = {14},
  location = {Paris, France},
  series = {POPL '97}
}

@article{plotkin1975call,
  title   = {Call-by-name, call-by-value and the $\lambda$-calculus},
  author  = {G.D. Plotkin},
  journal = {Theoretical Computer Science},
  volume  = {1},
  number  = {2},
  pages   = {125-159},
  year    = {1975}
}

@book{pierce2002types,
  author    = {Pierce, Benjamin C.},
  title     = {Types and Programming Languages},
  year      = {2002},
  publisher = {The MIT Press}
}

@inproceedings{ribeiro2016mechanized,
  author    = {Ribeiro, Rodrigo and Camar{\~a}o, Carlos},
  editor    = {Corn{\'e}lio, M{\'a}rcio and Roscoe, Bill},
  title     = {A Mechanized Textbook Proof of a Type Unification Algorithm},
  booktitle = {Formal Methods: Foundations and Applications},
  year      = {2016},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {127--141},
  isbn      = {978-3-319-29473-5}
}

@inproceedings{shao1998implementing,
  author    = {Zhong Shao and Christopher League and Stefan Monnier},
  title     = {Implementing Typed Intermediate Languages},
  booktitle = {Proceedings of the 1998 ACM SIGPLAN International Conference on Functional Programming (ICFP'98)},
  year      = {1998},
  address   = {Baltimore, Maryland, USA},
  publisher = {ACM Press},
  note      = {Also available as Yale University Technical Report},
  url       = {http://flint.cs.yale.edu/flint/publications/icfp98.ps},
}

@article{sondergaard1990transparency,
  title   = {Referential transparency, definiteness and unfoldability},
  author  = {S{\o}ndergaard, Harald and Sestoft, Peter},
  journal = {Acta Inform.},
  volume  = {27},
  number  = {6},
  year    = {1990}
}

@mastersthesis{torrens2019calculo,
  author = {Paulo Henrique Torrens},
  school = {UDESC},
  title  = {Um Cálculo de Continuações com Tipos Dependentes},
  year   = {2019}
}

@article{torrens2024operational,
  author  = {Torrens, Paulo and Orchard, Dominic and Vasconcellos, Cristiano},
  title   = {On the Operational Theory of the CPS-Calculus: Towards a Theoretical Foundation for IRs},
  journal = {Proc. ACM Program. Lang.},
  year    = {2024}
}

@misc{thielecke1997categorical,
  title  = {Categorical Structure of Continuation Passing Style},
  author = {Hayo Thielecke},
  year   = {1997}
}
